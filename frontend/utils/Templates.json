{
 "donation": {
  "html": "\n    <style> \n @import url('https://fonts.googleapis.com/css2?family=VT323&display=swap'); \n      .donate-container {\n        background-color: white;\n        width: 100%;\n        max-width: 28rem;\n        border: 2px solid black;\n        border-radius: 0.375rem;\n        height: 460px;\n        font-family: 'VT323', Arial, sans-serif;\n        overflow-y: auto;\n        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);\n        margin: 0 auto;\n      }\n      .content-wrapper {\n        padding: 16px;\n      }\n      .donate-image {\n        width: 100%;\n        height: auto;\n        max-height: 176px;\n        object-fit: contain;\n        margin-bottom: 8px;\n        border-radius: 0.125rem;\n      }\n      .form-container {\n        padding: 8px 4px;\n        display: flex;\n        flex-direction: column;\n        gap: 8px;\n      }\n      .input-label {\n        color: black;\n        font-size: 18px;\n      }\n      .amount-input-container {\n        display: flex;\n        align-items: center;\n        border: 1px solid #d1d5db;\n        padding: 8px;\n      }\n      .amount-input-icon {\n        width: 20px;\n        height: 20px;\n        margin-right: 8px;\n      }\n      .amount-input {\n        flex: 1;\n        background-color: transparent;\n        border: none;\n        outline: none;\n        color: black;\n        font-size: 16px;\n      }\n      .donate-button {\n        margin-top: 12px;\n        color: white;\n        font-size: 18px;\n        font-weight: 600;\n        padding: 4px 12px;\n        border-radius: 0.125rem;\n        width: 100%;\n        border: 1px solid black;\n        background-color: #1DA1F2;\n        transition: all 0.3s;\n        cursor: pointer;\n      }\n      .donate-button:disabled {\n        opacity: 0.7;\n        cursor: not-allowed;\n      }\n      .donate-button.loading {\n        background: linear-gradient(to right, #60a5fa, #ffffff);\n        animation: pulse 2s infinite;\n      }\n      .predefined-amounts {\n        display: flex;\n        justify-content: space-between;\n        margin-top: 8px;\n      }\n      .predefined-amount-button {\n        color: black;\n        font-weight: bold;\n        background-color: transparent;\n        padding: 4px 8px;\n        border-radius: 0.125rem;\n        border: 1px solid black;\n        flex: 1;\n        margin: 0 4px;\n      }\n      @keyframes pulse {\n        0% { background-position: 0% 50%; }\n        50% { background-position: 100% 50%; }\n        100% { background-position: 0% 50%; }\n      }\n    </style>\n    <div class=\"donate-container\">\n      <div class=\"content-wrapper\">\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3NcDS9MmqTwZLGavY36FuE8XmyPAoRIOJCQBK\" alt=\"Donate Background\" class=\"donate-image\" />\n        <div class=\"form-container\">\n          <label class=\"input-label\">Donate to cause:</label>\n          <div class=\"amount-input-container\">\n            <img src=\"https://utfs.io/f/PKy8oE1GN2J3ovmAor45P1iTwAUWSgurlXmB0cxH485C3q2s\" alt=\"APTOS\" class=\"amount-input-icon\" />\n            <input id=\"donationAmount\" type=\"number\" placeholder=\"Enter amount\" class=\"amount-input\" />\n          </div>\n          <button id=\"donateButton\" class=\"donate-button\">Donate APTOS</button>\n          <div class=\"predefined-amounts\">\n            <button class=\"predefined-amount-button\" data-amount=\"10\">Donate 10</button>\n            <button class=\"predefined-amount-button\" data-amount=\"50\">Donate 50</button>\n            <button class=\"predefined-amount-button\" data-amount=\"100\">Donate 100</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  ",
  "js": "\n    (function() {\n      const RECIPIENT = \"0xf9424969a5cfeb4639c4c75c2cd0ca62620ec624f4f28d76c4881a1e567d753f\";\n      \n      const waitForAptosWallet = () => {\n        return new Promise((resolve) => {\n          const checkWallet = () => {\n            if (window.aptos) {\n              resolve(window.aptos);\n            } else {\n              setTimeout(checkWallet, 100);\n            }\n          };\n          checkWallet();\n        });\n      };\n      \n      const checkTransactionStatus = async (hash) => {\n        try {\n          const response = await fetch(`https://fullnode.testnet.aptoslabs.com/v1/transactions/by_hash/${hash}`, {\n            headers: { 'Accept': 'application/json' }\n          });\n          const data = await response.json();\n          return data.success === true;\n        } catch (error) {\n          console.error('Error checking transaction status:', error);\n          return false;\n        }\n      };\n      \n      const waitForTransaction = async (hash, maxAttempts = 10) => {\n       return true;\n      };\n      \n      const initializeDonation = async () => {\n        const aptos = await waitForAptosWallet();\n        const donationAmountInput = document.getElementById('donationAmount');\n        const donateButton = document.getElementById('donateButton');\n        const predefinedButtons = document.querySelectorAll('.predefined-amount-button');\n        \n        let loading = false;\n        \n        const sendDonation = async (amount) => {\n          try {\n            const response = await aptos.connect();\n            const account = response.address;\n            \n            const payload = {\n              type: \"entry_function_payload\",\n              function: \"0x1::coin::transfer\",\n              type_arguments: [\"0x1::aptos_coin::AptosCoin\"],\n              arguments: [\n                RECIPIENT,\n                (amount * 100000000).toString()\n              ]\n            };\n            \n            const pendingTransaction = await aptos.signAndSubmitTransaction({ payload });\n            const success = await waitForTransaction(pendingTransaction.hash);\n            return success;\n          } catch (error) {\n            console.error('Transaction failed:', error);\n            return false;\n          }\n        };\n        \n        const handleDonation = async (amount) => {\n          if (loading) return;\n          \n          if (isNaN(amount) || amount <= 0) {\n            alert('Please enter a valid amount');\n            return;\n          }\n          \n          loading = true;\n          donateButton.disabled = true;\n          donateButton.classList.add('loading');\n          donateButton.textContent = 'Donating...';\n          \n          try {\n            const success = await sendDonation(amount);\n            \n            if (success) {\n              donateButton.classList.remove('loading');\n              donateButton.textContent = 'Donation Successful';\n              \n              setTimeout(() => {\n                donateButton.classList.remove('loading');\n                donateButton.disabled = false;\n                donateButton.textContent = 'Donate APTOS';\n                donationAmountInput.value = '';\n              }, 3000);\n            } else {\n              throw new Error('Transaction failed');\n            }\n          } catch (error) {\n            console.error('Donation error:', error);\n            donateButton.classList.remove('loading');\n            donateButton.disabled = false;\n            donateButton.textContent = 'Donate APTOS';\n            alert('Transaction failed. Please try again.');\n          } finally {\n            loading = false;\n          }\n        };\n        \n        donateButton.addEventListener('click', () => {\n          const amount = Number(donationAmountInput.value);\n          handleDonation(amount);\n        });\n        \n        predefinedButtons.forEach(button => {\n          button.addEventListener('click', () => {\n            const amount = Number(button.getAttribute('data-amount'));\n            donationAmountInput.value = amount;\n            handleDonation(amount);\n          });\n        });\n      };\n      \n      initializeDonation();\n    })();\n  ",
  "name": "Donate"
},

 "payment": {
  "html": "<style> \n @import url('https://fonts.googleapis.com/css2?family=VT323&display=swap'); \n.payment-container {\nbackground-color: white;\nwidth: 320px;\nborder: 2px solid black;\nborder-radius: 0.375rem;\nheight: 460px;\nfont-family: 'VT323', Arial, sans-serif;\noverflow-y: auto;\nbox-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);\nmargin: 0 auto;\n}\n.content-wrapper {\npadding: 16px;\n}\n.payment-image {\nwidth: 100%;\nheight: auto;\nmax-height: 176px;\nobject-fit: contain;\nmargin-bottom: 16px;\nborder-radius: 0.125rem;\n}\n.form-container {\npadding: 12px 4px;\ndisplay: flex;\nflex-direction: column;\nmargin-top: 12px;\n}\n.input-label {\ncolor: black;\nfont-weight: 600;\nfont-size: 18px;\nmargin-top: 4px;\n}\n.service-select {\nflex: 1;\nbackground-color: transparent;\npadding: 8px;\nborder: 1px solid #d1d5db;\noutline: none;\nmargin-top: 4px;\ncolor: black;\n}\n.amount-input {\nflex: 1;\nbackground-color: transparent;\ncolor: black;\nborder-radius: 0;\nmargin-top: 4px;\nborder: 1px solid #d1d5db;\npadding: 8px;\n}\n.payment-button {\nmargin-top: 12px;\ncolor: white;\nfont-size: 18px;\nfont-weight: 600;\npadding: 4px 12px;\nborder-radius: 0.125rem;\nwidth: 100%;\nborder: 1px solid black;\ntransition: all 0.3s;\nbackground-color: #1DA1F2;\ncursor: pointer;\n}\n.payment-button:disabled {\nopacity: 0.7;\ncursor: not-allowed;\n}\n.payment-button.loading {\nbackground: linear-gradient(to right, #60a5fa, #ffffff);\nanimation: pulse 2s infinite;\n}\n@keyframes pulse {\n0% {\nbackground-position: 0% 50%;\n}\n50% {\nbackground-position: 100% 50%;\n}\n100% {\nbackground-position: 0% 50%;\n}\n}\n</style>\n<div class=\"payment-container\">\n<div class=\"content-wrapper\">\n<img src=\"https://utfs.io/f/PKy8oE1GN2J3QgJ0elMB4oh9KpZbJwuajRl6c2XWTSfEVm85\" alt=\"Payment aptos\" class=\"payment-image\" />\n<div class=\"form-container\">\n<label class=\"input-label\">Service Rendered:</label>\n<select id=\"serviceType\" class=\"service-select\">\n<option value=\"Gig Payment\">Gig Payment</option>\n<option value=\"Tip\">Tip</option>\n</select>\n<label class=\"input-label\">Payment Fee:</label>\n<input id=\"paymentAmount\" type=\"number\" placeholder=\"Enter Amount\" class=\"amount-input\" />\n<button id=\"paymentButton\" class=\"payment-button\">Send Payment</button>\n</div>\n</div>\n</div>",
  "js": "(function() {\nconst RECIPIENT = \"0xf9424969a5cfeb4639c4c75c2cd0ca62620ec624f4f28d76c4881a1e567d753f\";\n\nconst waitForAptosWallet = () => {\nreturn new Promise((resolve) => {\nconst checkWallet = () => {\nif (window.aptos) {\nresolve(window.aptos)\n} else {\nsetTimeout(checkWallet, 100)\n}\n}\ncheckWallet()\n})\n}\n\nconst checkTransactionStatus = async (hash) => {\ntry {\nconst response = await fetch(`https://fullnode.testnet.aptoslabs.com/v1/transactions/by_hash/${hash}`, {\n    headers: {\n        'Accept': 'application/json'\n    }\n})\nconst data = await response.json()\nreturn data.success === true\n} catch (error) {\nconsole.error('Error checking transaction status:', error)\nreturn false\n}\n}\n\nconst waitForTransaction = async (hash, maxAttempts = 10) => {\n return true\n}\nconst initializePayment = async () => {\nconst aptos = await waitForAptosWallet()\nconst serviceTypeSelect = document.getElementById('serviceType')\nconst paymentAmountInput = document.getElementById('paymentAmount')\nconst paymentButton = document.getElementById('paymentButton')\n\nlet loading = false\n\nconst sendPayment = async (serviceType, amount) => {\ntry {\nconst response = await aptos.connect()\nconst account = response.address\n\nconst payload = {\ntype: \"entry_function_payload\",\nfunction: \"0x1::coin::transfer\",\ntype_arguments: [\"0x1::aptos_coin::AptosCoin\"],\narguments: [\nRECIPIENT,\n(amount * 100000000).toString()\n]\n}\n\nconst pendingTransaction = await aptos.signAndSubmitTransaction({ payload })\n\nconst success = await waitForTransaction(pendingTransaction.hash)\nreturn success\n\n} catch (error) {\nconsole.error('Transaction failed:', error)\nreturn false\n}\n}\n\npaymentButton.addEventListener('click', async () => {\nif (loading) return\n\nconst amount = Number(paymentAmountInput.value)\nconst serviceType = serviceTypeSelect.value\n\nif (isNaN(amount) || amount <= 0) {\nalert('Please enter a valid amount')\nreturn\n}\n\nloading = true\npaymentButton.disabled = true\npaymentButton.classList.add('loading')\npaymentButton.textContent = 'Paying...'\n\ntry {\nconst success = await sendPayment(serviceType, amount)\n\nif (success) {\npaymentButton.classList.remove('loading')\npaymentButton.textContent = 'Payment Successful'\n\nsetTimeout(() => {\npaymentButton.classList.remove('loading')\npaymentButton.disabled = false\npaymentButton.textContent = 'Send Payment'\npaymentAmountInput.value = ''\n}, 3000)\n} else {\nthrow new Error('Transaction failed')\n}\n} catch (error) {\nconsole.error('Payment error:', error)\npaymentButton.classList.remove('loading')\npaymentButton.disabled = false\npaymentButton.textContent = 'Send Payment'\nalert('Transaction failed. Please try again.')\n} finally {\nloading = false\n}\n})\n}\n\ninitializePayment()\n})()",
  "name": "Payment"
},

"marketplace": {
  "name": "Marketplace",
  "html": "\n    <style> \n @import url('https://fonts.googleapis.com/css2?family=VT323&display=swap'); \n      .container { background-color: white; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); margin: auto; border: 2px solid black; height: 460px; width: 330px; overflow-y: auto; font-family: 'VT323', Arial, sans-serif; padding: 16px; }\n      .image-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 8px; }\n      .image { width: 100%; height: 144px; object-fit: cover; border-radius: 4px; }\n      .label { color: black; font-size: 18px; margin-bottom: 4px; margin-top: 16px; }\n      .input { width: 100%; background-color: transparent; color: black; border: 1px solid #d1d5db; padding: 8px; border-radius: 4px; }\n      .button { margin-top: 12px; color: white; font-size: 18px; font-weight: 600; padding: 6px; border-radius: 4px; width: 100%; background-color: #1DA1F2; border: 1px solid black; transition: background-color 0.3s; }\n      .loading { background: linear-gradient(to right, #3b82f6, white); animation: pulse 1s infinite; }\n      @keyframes pulse { 0% { opacity: 1; } 50% { opacity: 0.7; } 100% { opacity: 1; } }\n    </style>\n    <div class=\"container\">\n      <div class=\"image-grid\">\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3ImEUxfLevETDAcJq1nugYV4XWR2yULbo7PO9\" alt=\"NFT aptos\" class=\"image\" />\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3KOWGsVvRh3M9zZEHBsUJXb2rmgqjVN7dGF0A\" alt=\"NFT aptos\" class=\"image\" />\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J34Ea4iszOtmS4gyWw60ueoFxcn1br78fIZYvJ\" alt=\"NFT aptos\" class=\"image\" />\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3SBvM9TJRHgldbCZqO68FamQULKyreIx24zPN\" alt=\"NFT aptos\" class=\"image\" />\n      </div>\n\n      <label class=\"label\">Quantity:</label>\n      <input\n        id=\"amount\"\n        type=\"number\"\n        placeholder=\"Amount\"\n        class=\"input\"\n      />\n\n      <button\n        id=\"purchaseButton\"\n        onclick=\"handleNFT()\"\n        disabled=\"false\"\n        class=\"button\"\n      >\n        Purchase NFT\n      </button>\n    </div>\n  ",
  "js": " \nconst RECIPIENT = \"0xf9424969a5cfeb4639c4c75c2cd0ca62620ec624f4f28d76c4881a1e567d753f\"; \n    let loading = false;\n    let success = false;\n\n    async function handleNFT() {\n      loading = true;\n      success = false;\n\n      // Simulating the bridging process\n      await new Promise((resolve) => setTimeout(resolve, 5000));\n\n      loading = false;\n      success = true;\n\n      const purchaseButton = document.getElementById('purchaseButton');\n      purchaseButton.innerHTML = '✓ Coming Soon';\n      purchaseButton.style.backgroundColor = 'blue';\n      purchaseButton.style.color = 'white';\n\n      setTimeout(() => {\n        success = false;\n        document.getElementById('amount').value = '';\n        purchaseButton.innerHTML = 'Purchase NFT';\n        purchaseButton.style.backgroundColor = '';\n        purchaseButton.style.color = 'black';\n      }, 3000);\n    }\n  "
},

"token": {
  "html": "<style> \n @import url('https://fonts.googleapis.com/css2?family=VT323&display=swap'); \n.container {\nbackground-color: white;\nwidth: 320px;\nborder: 2px solid black;\nborder-radius: 0.375rem;\nheight: 460px;\nfont-family: 'VT323', Arial, sans-serif;\noverflow-y: auto;\nbox-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);\nmargin: 0 auto;\npadding: 16px;\n}\n.token-image {\nwidth: 100%;\nmax-width: 96px;\nheight: auto;\nmax-height: 160px;\nobject-fit: contain;\nmargin-bottom: 16px;\nborder-radius: 9999px;\noverflow: hidden;\n}\n.image-wrapper {\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nmargin-bottom: 16px;\n}\n.input-label {\ncolor: black;\nfont-weight: 500;\nfont-size: 18px;\nmargin-top: 4px;\n}\n.amount-input {\nwidth: 100%;\nbackground-color: transparent;\ncolor: black;\nborder-radius: 0;\nmargin-top: 4px;\nborder: 1px solid #d1d5db;\npadding: 8px;\n}\n.stats-container {\ndisplay: flex;\njustify-content: space-between;\npadding: 8px;\nmargin: 12px 0;\nborder-radius: 8px;\n}\n.stat-item {\ntext-align: left;\n}\n.stat-label {\nfont-weight: 500;\ncolor: #4b5563;\n}\n.stat-value {\nfont-size: 20px;\nfont-weight: 700;\ncolor: black;\n}\n.stat-subtext {\nfont-size: 12px;\ncolor: #4b5563;\n}\n.mint-button {\nwidth: 100%;\ncolor: white;\nfont-size: 18px;\nfont-weight: 600;\npadding: 4px 12px;\nborder-radius: 2px;\nborder: 1px solid black;\nmargin-top: 12px;\ncursor: pointer;\nbackground-color: #1DA1F2;\ntransition: all 0.3s;\n}\n.mint-button:disabled {\nopacity: 0.7;\ncursor: not-allowed;\n}\n.mint-button.loading {\nbackground: linear-gradient(to right, #60a5fa, #ffffff);\nanimation: pulse 2s infinite;\n}\n.token-address {\ndisplay: flex;\njustify-content: space-between;\nalign-items: center;\nmargin-top: 12px;\ncolor: #111827;\n}\n.address-link {\ncolor: #3b82f6;\ntext-decoration: none;\nmax-width: 200px;\noverflow: hidden;\ntext-overflow: ellipsis;\nwhite-space: nowrap;\n}\n.address-link:hover {\ntext-decoration: underline;\n}\n@keyframes pulse {\n0% { background-position: 0% 50%; }\n50% { background-position: 100% 50%; }\n100% { background-position: 0% 50%; }\n}\n</style>\n<div class=\"container\">\n<div class=\"image-wrapper\">\n<img id=\"tokenImage\" src=\"https://utfs.io/f/PKy8oE1GN2J3w6bQu3oTGjD39YCQS6grBNLTs0O8fHmZ51cK\" alt=\"Token icon\" class=\"token-image\" />\n</div>\n<div>\n<label class=\"input-label\">Quantity to Mint:</label>\n<input id=\"quantityInput\" type=\"number\" placeholder=\"Enter quantity to mint\" class=\"amount-input\" />\n</div>\n<div class=\"stats-container\">\n<div class=\"stat-item\">\n<p class=\"stat-label\">Mint Limit</p>\n<p class=\"stat-value\"><span id=\"mintLimit\">0</span> <span id=\"tokenSymbol\"></span></p>\n<p class=\"stat-subtext\">Maximum to mint</p>\n</div>\n<div class=\"stat-item\">\n<p class=\"stat-label\">Your Balance</p>\n<p class=\"stat-value\"><span id=\"userBalance\">0</span> <span id=\"tokenSymbol2\"></span></p>\n<p class=\"stat-subtext\">Your Balance</p>\n</div>\n<div class=\"stat-item\">\n<p class=\"stat-label\">Total Supply</p>\n<p class=\"stat-value\"><span id=\"currentSupply\">0</span> / <span id=\"maxSupply\">0</span></p>\n<p class=\"stat-subtext\">Minted/Max Supply</p>\n</div>\n</div>\n<button id=\"mintButton\" class=\"mint-button\">Mint Tokens</button>\n<div class=\"token-address\">\n<span>Token Address:</span>\n<a id=\"tokenAddressLink\" class=\"address-link\" target=\"_blank\" rel=\"noopener noreferrer\">Loading...</a>\n</div>\n</div>",
  "js": "(function() {\nconst NETWORK = 'testnet';\nconst TOKEN_CONFIG = {\nname: 'Example Token',\nsymbol: 'TKN',\ncontractAddress: '0x123...abc',\niconUri: 'https://utfs.io/f/PKy8oE1GN2J3w6bQu3oTGjD39YCQS6grBNLTs0O8fHmZ51cK',\nmaxSupply: 10000,\nmintLimit: 1000\n};\n\nasync function waitForAptosWallet() {\nreturn new Promise((resolve) => {\nconst checkWallet = () => {\nif (window.aptos) {\nresolve(window.aptos);\n} else {\nsetTimeout(checkWallet, 100);\n}\n};\ncheckWallet();\n});\n}\n\nasync function initializeMint() {\nconst aptos = await waitForAptosWallet();\nconst quantityInput = document.getElementById('quantityInput');\nconst mintButton = document.getElementById('mintButton');\nlet loading = false;\n\nasync function updateUI(assetData) {\nconst {\nasset = TOKEN_CONFIG,\nuserMintBalance = TOKEN_CONFIG.mintLimit,\nyourBalance = 0,\nmaxSupply = TOKEN_CONFIG.maxSupply,\ncurrentSupply = 0,\nisMintActive = true\n} = assetData;\n\ndocument.getElementById('tokenImage').src = asset.iconUri;\ndocument.getElementById('mintLimit').textContent = Math.min(userMintBalance, maxSupply - currentSupply);\ndocument.getElementById('tokenSymbol').textContent = asset.symbol;\ndocument.getElementById('tokenSymbol2').textContent = asset.symbol;\ndocument.getElementById('userBalance').textContent = yourBalance;\ndocument.getElementById('currentSupply').textContent = currentSupply;\ndocument.getElementById('maxSupply').textContent = maxSupply;\ndocument.getElementById('tokenAddressLink').href = `https://explorer.aptoslabs.com/account/${asset.contractAddress}?network=${NETWORK}`;\ndocument.getElementById('tokenAddressLink').textContent = asset.contractAddress;\n\nmintButton.disabled = !isMintActive;\n}\n\nasync function mintFA(amount) {\nif (!aptos) throw new Error('Please connect your wallet');\n\nconst payload = {\ntype: \"entry_function_payload\",\nfunction: \"0x1::coin::mint\",\ntype_arguments: [\"0x1::aptos_coin::AptosCoin\"],\narguments: [amount]\n};\n\nconst response = await aptos.signAndSubmitTransaction({ payload });\nreturn response.hash;\n}\n\nmintButton.addEventListener('click', async () => {\nif (loading) return;\n\nconst amount = parseFloat(quantityInput.value);\nif (isNaN(amount) || amount <= 0) {\nalert('Please enter a valid amount');\nreturn;\n}\n\nloading = true;\nmintButton.disabled = true;\nmintButton.classList.add('loading');\nmintButton.textContent = 'Minting...';\n\ntry {\nconst hash = await mintFA(amount);\nmintButton.textContent = '✓ Minted Successfully!';\nsetTimeout(() => {\nloading = false;\nmintButton.disabled = false;\nmintButton.classList.remove('loading');\nmintButton.textContent = 'Mint Tokens';\nquantityInput.value = '';\n}, 3000);\n} catch (error) {\nconsole.error('Minting error:', error);\nalert('Transaction failed. Please try again.');\nloading = false;\nmintButton.disabled = false;\nmintButton.classList.remove('loading');\nmintButton.textContent = 'Mint Tokens';\n}\n});\n\nconst mockAssetData = {\nasset: TOKEN_CONFIG,\nuserMintBalance: TOKEN_CONFIG.mintLimit,\nyourBalance: 0,\nmaxSupply: TOKEN_CONFIG.maxSupply,\ncurrentSupply: 5000,\nisMintActive: true\n};\n\nawait updateUI(mockAssetData);\n}\n\ninitializeMint();\n})()",
  "name": "Token"
},

"nft": {
  "name": "NFT",
  "html": "<style> \n @import url('https://fonts.googleapis.com/css2?family=VT323&display=swap'); \n.container {\nbackground-color: white;\nwidth: 320px;\nborder: 2px solid black;\nborder-radius: 0.375rem;\nheight: 460px;\nfont-family: 'VT323', Arial, sans-serif;\noverflow-y: auto;\nbox-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);\nmargin: 0 auto;\npadding: 16px;\n}\n.nft-image {\nwidth: 100%;\nheight: auto;\nmax-height: 160px;\nobject-fit: contain;\nmargin-bottom: 6px;\nborder-radius: 0.125rem;\n}\n.collection-info {\npadding: 8px;\nmargin-bottom: 16px;\n}\n.collection-name {\nfont-size: 24px;\nfont-weight: 700;\ncolor: black;\nmargin-bottom: 4px;\n}\n.collection-description {\nfont-size: 14px;\ncolor: #4b5563;\nmargin-bottom: 12px;\n}\n.stats-container {\ndisplay: flex;\njustify-content: space-between;\npadding: 8px;\nmargin: 12px 0;\nborder-radius: 8px;\n}\n.stat-item {\ntext-align: left;\n}\n.stat-label {\nfont-weight: 500;\ncolor: #4b5563;\n}\n.stat-value {\nfont-size: 20px;\nfont-weight: 700;\ncolor: black;\n}\n.stat-subtext {\nfont-size: 12px;\ncolor: #4b5563;\n}\n.mint-form {\nmargin-top: 16px;\n}\n.input-label {\ncolor: black;\nfont-weight: 500;\nfont-size: 18px;\ndisplay: block;\nmargin-bottom: 4px;\n}\n.amount-input {\nwidth: 100%;\nbackground-color: transparent;\ncolor: black;\nborder-radius: 0;\nmargin-top: 4px;\nborder: 1px solid #d1d5db;\npadding: 8px;\n}\n.mint-button {\nwidth: 100%;\ncolor: white;\nfont-size: 18px;\nfont-weight: 600;\npadding: 4px 12px;\nborder-radius: 2px;\nborder: 1px solid black;\nmargin-top: 12px;\nbackground-color: #1DA1F2;\ncursor: pointer;\ntransition: all 0.3s;\n}\n.mint-button:disabled {\nopacity: 0.7;\ncursor: not-allowed;\n}\n.mint-button.loading {\nbackground: linear-gradient(to right, #60a5fa, #ffffff);\nanimation: pulse 2s infinite;\n}\n.collection-address {\ndisplay: flex;\njustify-content: space-between;\nalign-items: center;\nmargin-top: 12px;\ncolor: #111827;\n}\n.address-link {\ncolor: #3b82f6;\ntext-decoration: none;\nmax-width: 200px;\noverflow: hidden;\ntext-overflow: ellipsis;\nwhite-space: nowrap;\n}\n.address-link:hover {\ntext-decoration: underline;\n}\n@keyframes pulse {\n0% { background-position: 0% 50%; }\n50% { background-position: 100% 50%; }\n100% { background-position: 0% 50%; }\n}\n</style>\n<div class=\"container\">\n<img src=\"https://utfs.io/f/PKy8oE1GN2J3pihxJUVwi394rogIqdXzW56n8bYJTPQ1MAjv\" id=\"collectionImage\" class=\"nft-image\" alt=\"NFT Collection\" />\n<div class=\"collection-info\">\n<h2 id=\"collectionName\" class=\"collection-name\"></h2>\n<p id=\"collectionDescription\" class=\"collection-description\"></p>\n</div>\n<label class=\"input-label\">Quantity:</label>\n<input \nid=\"mintAmount\"\nplaceholder=\"Enter quantity to mint\" \ntype=\"number\" \nvalue=\"1\" \nmin=\"1\" \nclass=\"amount-input\" \n/>\n<div class=\"stats-container\">\n<div class=\"stat-item\">\n<p class=\"stat-label\">Mint Limit</p>\n<p class=\"stat-value\"><span id=\"mintLimit\">0</span></p>\n<p class=\"stat-subtext\">Maximum to mint</p>\n</div>\n<div class=\"stat-item\">\n<p class=\"stat-label\">Your Balance</p>\n<p class=\"stat-value\"><span id=\"userBalance\">0</span></p>\n<p class=\"stat-subtext\">Your Balance</p>\n</div>\n<div class=\"stat-item\">\n<p class=\"stat-label\">Total Supply</p>\n<p class=\"stat-value\">\n<span id=\"totalMinted\">0</span> / <span id=\"maxSupply\">0</span>\n</p>\n<p class=\"stat-subtext\">Minted/Max Supply</p>\n</div>\n</div>\n<div class=\"mint-form\">\n<button id=\"mintButton\" class=\"mint-button\">Mint NFT</button>\n</div>\n<div class=\"collection-address\">\n<span>Collection Address:</span>\n<a id=\"collectionAddressLink\" class=\"address-link\" target=\"_blank\" rel=\"noopener noreferrer\">Loading...</a>\n</div>\n</div>",
  "js": "(function() {\nconst NETWORK = 'testnet';\nconst NFT_CONFIG = {\ncollectionName: 'Example NFT Collection',\ncollectionDescription: 'A beautiful collection of unique NFTs',\ncollectionImage: 'https://utfs.io/f/PKy8oE1GN2J3pihxJUVwi394rogIqdXzW56n8bYJTPQ1MAjv',\ncontractAddress: '0x123...abc',\nmaxSupply: 1000,\nmintLimitPerAccount: 5,\nmintFee: 1, \nisMintActive: true\n};\n\nasync function waitForAptosWallet() {\nreturn new Promise((resolve) => {\nconst checkWallet = () => {\nif (window.aptos) {\nresolve(window.aptos);\n} else {\nsetTimeout(checkWallet, 100);\n}\n};\ncheckWallet();\n});\n}\n\nasync function initializeMint() {\nconst aptos = await waitForAptosWallet();\nconst mintAmount = document.getElementById('mintAmount');\nconst mintButton = document.getElementById('mintButton');\nlet loading = false;\n\nasync function updateUI(collectionData) {\nconst {\ncollection = NFT_CONFIG,\nuserMintBalance = NFT_CONFIG.mintLimitPerAccount,\nyourBalance = 0,\nmaxSupply = NFT_CONFIG.maxSupply,\ntotalMinted = 0,\nisMintActive = NFT_CONFIG.isMintActive\n} = collectionData;\n\ndocument.getElementById('collectionImage').src = collection.collectionImage;\ndocument.getElementById('collectionName').textContent = collection.collectionName;\ndocument.getElementById('collectionDescription').textContent = collection.collectionDescription;\ndocument.getElementById('mintLimit').textContent = Math.min(userMintBalance, maxSupply - totalMinted);\ndocument.getElementById('userBalance').textContent = yourBalance;\ndocument.getElementById('totalMinted').textContent = totalMinted;\ndocument.getElementById('maxSupply').textContent = maxSupply;\ndocument.getElementById('collectionAddressLink').href = `https://explorer.aptoslabs.com/account/${collection.contractAddress}?network=${NETWORK}`;\ndocument.getElementById('collectionAddressLink').textContent = collection.contractAddress;\n\nmintButton.disabled = !isMintActive;\n}\n\nasync function mintNFT(amount) {\nif (!aptos) throw new Error('Please connect your wallet');\n\nconst payload = {\ntype: 'entry_function_payload',\nfunction: '0x1::nft::mint',\ntype_arguments: [],\narguments: [NFT_CONFIG.contractAddress, amount]\n};\n\nconst response = await aptos.signAndSubmitTransaction(payload);\nreturn response.hash;\n}\n\nmintButton.addEventListener('click', async () => {\nif (loading) return;\n\nconst amount = parseInt(mintAmount.value);\nif (isNaN(amount) || amount <= 0 || amount > NFT_CONFIG.mintLimitPerAccount) {\nalert(`Please enter a valid amount between 1 and ${NFT_CONFIG.mintLimitPerAccount}`);\nreturn;\n}\n\nloading = true;\nmintButton.disabled = true;\nmintButton.classList.add('loading');\nmintButton.textContent = 'Minting...';\n\ntry {\nconst hash = await mintNFT(amount);\nmintButton.textContent = '✓ Minted Successfully!';\n\nsetTimeout(() => {\nloading = false;\nmintButton.disabled = false;\nmintButton.classList.remove('loading');\nmintButton.textContent = 'Mint NFT';\nmintAmount.value = '1';\n// Fetch and update UI with new data\nfetchAndUpdateUI();\n}, 3000);\n} catch (error) {\nconsole.error('Minting failed:', error);\nalert('Minting failed, please try again.');\nloading = false;\nmintButton.disabled = false;\nmintButton.classList.remove('loading');\nmintButton.textContent = 'Mint NFT';\n}\n});\n\nasync function fetchAndUpdateUI() {\n// Replace with the actual API call to get the collection data\nconst collectionData = await fetch('/api/collection-data').then(res => res.json());\nupdateUI(collectionData);\n}\n\nfetchAndUpdateUI();\n})()"
},

"polls": {
  "name": "Polls",
  "html": "<style> \n @import url('https://fonts.googleapis.com/css2?family=VT323&display=swap'); \n.voting-container {\nbackground-color: white;\nwidth: 320px;\nborder: 2px solid black;\nborder-radius: 0.375rem;\nheight: 460px;\nfont-family: 'VT323', Arial, sans-serif;\noverflow-y: auto;\nbox-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);\nmargin: 0 auto;\n}\n.content-wrapper {\npadding: 16px;\n}\n.voting-image {\nwidth: 100%;\nheight: auto;\nmax-height: 176px;\nobject-fit: contain;\nmargin-bottom: 16px;\nborder-radius: 0.125rem;\n}\n.form-container {\npadding: 12px 4px;\ndisplay: flex;\nflex-direction: column;\nmargin-top: 12px;\n}\n.input-label {\ncolor: black;\nfont-weight: 600;\nfont-size: 18px;\nmargin-top: 4px;\n}\n.candidate-list {\nmargin-top: 12px;\n}\n.candidate-item {\ndisplay: flex;\njustify-content: space-between;\nmargin-bottom: 8px;\npadding: 8px;\nborder: 1px solid #d1d5db;\n}\n.voting-button {\nmargin-top: 12px;\ncolor: white;\nfont-size: 18px;\nfont-weight: 600;\npadding: 4px 12px;\nborder-radius: 0.125rem;\nwidth: 100%;\nborder: 1px solid black;\ntransition: all 0.3s;\ncursor: pointer;\nbackground-color: #1DA1F2;\n}\n\n.declare-button {\nmargin-top: 12px;\ncolor: black;\nfont-size: 18px;\nfont-weight: 600;\npadding: 4px 12px;\nborder-radius: 0.125rem;\nwidth: 100%;\nborder: 1px solid black;\ntransition: all 0.3s;\ncursor: pointer;\nbackground-color: transparent;\n}\n\n.voting-button:disabled {\nopacity: 0.7;\ncursor: not-allowed;\n}\n.voting-button.loading {\nbackground: linear-gradient(to right, #60a5fa, #ffffff);\nanimation: pulse 2s infinite;\n}\n\n.declare-button.loading {\nbackground: linear-gradient(to right, #60a5fa, #ffffff);\nanimation: pulse 2s infinite;\n}\n\n\n@keyframes pulse {\n0% {\nbackground-position: 0% 50%;\n}\n50% {\nbackground-position: 100% 50%;\n}\n100% {\nbackground-position: 0% 50%;\n}\n}\n.timer {\ntext-align: center;\nmargin-top: 16px;\nfont-size: 18px;\nfont-weight: 600;\n}\n</style>\n<div class=\"voting-container\">\n<div class=\"content-wrapper\">\n<img src=\"https://utfs.io/f/PKy8oE1GN2J3cXPyS4JnrjPmytFlpWZ2Y3gkRdK087boqXfG\" alt=\"Voting\" class=\"voting-image\" />\n<div class=\"form-container\">\n<label class=\"input-label\">Vote for a candidate:</label>\n<div id=\"candidateList\" class=\"candidate-list\"></div>\n<button id=\"voteButton\" class=\"voting-button\">Vote</button>\n<button id=\"declareWinnerButton\" class=\"declare-button\">Declare Winner</button>\n</div>\n<div id=\"timer\" class=\"timer\"></div>\n</div>\n</div>",
  "js": "(function() {\nconst address = \"0xdd71645e95789f143af6fd1b3ed37164378faea32691a56eb51b7d605fe16962\";\nconst name = \"Voting\";\nconst creator = \"0x2\";\n\nlet candidates = [];\nlet scores = [];\nlet timer = 300;\nlet isInitialized = false;\n\nconst waitForAptosWallet = () => {\nreturn new Promise((resolve) => {\nconst checkWallet = () => {\nif (window.aptos) {\nresolve(window.aptos);\n} else {\nsetTimeout(checkWallet, 100);\n}\n};\ncheckWallet();\n});\n};\n\nconst showError = (message) => {\nalert(message);\n};\n\nconst checkTransactionStatus = async (hash) => {\ntry {\nconst url = `https://api.testnet.aptoslabs.com/v1/transactions/wait_by_hash/${hash}`;\nconst options = {method: 'GET', headers: {Accept: 'application/json, application/x-bcs'}};\nconst response = await fetch(url, options);\nconst data = await response.json();\nreturn data.success === true;\n} catch (error) {\nconsole.error('Error checking transaction status:', error);\nreturn false;\n}\n};\n\nconst waitForTransaction = async (hash, maxAttempts = 10) => {\nfor (let i = 0; i < maxAttempts; i++) {\nconst success = await checkTransactionStatus(hash);\nif (success) return true;\nawait new Promise(resolve => setTimeout(resolve, 1000));\n}\nreturn false;\n};\n\nconst fetchScores = async () => {\ntry {\nconst url = 'https://api.testnet.aptoslabs.com/v1/view';\nconst options = {\nmethod: 'POST',\nheaders: {\n'Content-Type': 'application/json',\nAccept: 'application/json, application/x-bcs'\n},\nbody: JSON.stringify({\nfunction: `${address}::${name}::view_current_scores`,\ntype_arguments: [],\narguments: [creator]\n})\n};\nconst response = await fetch(url, options);\nconst data = await response.json();\nreturn data;\n} catch (error) {\nconsole.error('Error fetching scores:', error);\nshowError('Failed to fetch current scores');\nreturn null;\n}\n};\n\nconst updateCandidatesAndScores = async () => {\nconst result = await fetchScores();\nif (result && Array.isArray(result) && result.length === 2) {\ncandidates = result[0];\nscores = result[1].map(score => parseInt(score));\nrenderCandidates();\n}\n};\n\nconst renderCandidates = () => {\nconst candidateList = document.getElementById('candidateList');\nif (!candidateList) return;\n\ncandidateList.innerHTML = '';\ncandidates.forEach((candidate, index) => {\nconst candidateItem = document.createElement('div');\ncandidateItem.className = 'candidate-item';\ncandidateItem.innerHTML = `<span>${candidate}</span><span>${scores[index]} votes</span>`;\ncandidateList.appendChild(candidateItem);\n});\n};\n\nconst updateTimer = () => {\nconst timerElement = document.getElementById('timer');\nif (!timerElement) return;\ntimerElement.textContent = `Time remaining: ${formatTime(timer)}`;\n};\n\nconst formatTime = (time) => {\nconst minutes = Math.floor(time / 60);\nconst seconds = time % 60;\nreturn `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n};\n\nconst handleVote = async (selectedCandidate) => {\nconst voteButton = document.getElementById('voteButton');\nif (!voteButton) return;\n\ntry {\nconst aptos = await waitForAptosWallet();\nconst response = await aptos.connect();\nconst account = response.address;\n\nconst payload = {\nsender: account,\nsequence_number: '1', // This should be dynamically determined\nmax_gas_amount: '1000',\ngas_unit_price: '100',\nexpiration_timestamp_secs: Math.floor(Date.now() / 1000) + 600, // 10 minutes from now\npayload: {\ntype: 'entry_function_payload',\nfunction: `${address}::${name}::vote`,\ntype_arguments: [],\narguments: [selectedCandidate, creator]\n},\n// The signature should be added by the wallet\n};\n\nvoteButton.disabled = true;\nvoteButton.classList.add('loading');\nvoteButton.textContent = 'Voting...';\n\nconst signedTxn = await aptos.signTransaction(payload);\nconst pendingTransaction = await aptos.submitTransaction(signedTxn);\n\nconst success = await waitForTransaction(pendingTransaction.hash);\n\nif (success) {\nvoteButton.textContent = 'Vote Successful';\nawait updateCandidatesAndScores();\n\nsetTimeout(() => {\nvoteButton.classList.remove('loading');\nvoteButton.disabled = false;\nvoteButton.textContent = 'Vote';\n}, 3000);\n} else {\nthrow new Error('Vote failed');\n}\n} catch (error) {\nconsole.error('Voting error:', error);\nvoteButton.classList.remove('loading');\nvoteButton.disabled = false;\nvoteButton.textContent = 'Vote';\nshowError('Vote failed. Please try again.');\n}\n};\n\nconst handleDeclareWinner = async () => {\nconst declareButton = document.getElementById('declareWinnerButton');\nif (!declareButton) return;\n\nif (timer > 0) {\nshowError('Voting is still in progress');\nreturn;\n}\n\ntry {\nconst aptos = await waitForAptosWallet();\nconst response = await aptos.connect();\nconst account = response.address;\n\nconst payload = {\nsender: account,\nsequence_number: '1', // This should be dynamically determined\nmax_gas_amount: '1000',\ngas_unit_price: '100',\nexpiration_timestamp_secs: Math.floor(Date.now() / 1000) + 600, // 10 minutes from now\npayload: {\ntype: 'entry_function_payload',\nfunction: `${address}::${name}::declare_winner`,\ntype_arguments: [],\narguments: [creator]\n},\n// The signature should be added by the wallet\n};\n\ndeclareButton.disabled = true;\ndeclareButton.classList.add('loading');\ndeclareButton.textContent = 'Declaring...';\n\nconst signedTxn = await aptos.signTransaction(payload);\nconst pendingTransaction = await aptos.submitTransaction(signedTxn);\n\nconst success = await waitForTransaction(pendingTransaction.hash);\n\nif (success) {\nconst winnerIndex = scores.indexOf(Math.max(...scores));\nshowError(`Winner: ${candidates[winnerIndex]} with ${scores[winnerIndex]} votes!`);\n\nsetTimeout(() => {\ndeclareButton.classList.remove('loading');\ndeclareButton.disabled = false;\ndeclareButton.textContent = 'Declare Winner';\n}, 3000);\n} else {\nthrow new Error('Failed to declare winner');\n}\n} catch (error) {\nconsole.error('Error declaring winner:', error);\ndeclareButton.classList.remove('loading');\ndeclareButton.disabled = false;\ndeclareButton.textContent = 'Declare Winner';\nshowError('Failed to declare winner');\n}\n};\n\nconst initializeVoting = async () => {\nconst voteButton = document.getElementById('voteButton');\nconst declareButton = document.getElementById('declareWinnerButton');\n\nif (voteButton) {\nvoteButton.addEventListener('click', () => {\nconst selectedCandidate = prompt(`Enter the candidate name to vote (options: ${candidates.join(', ')}):`); \nif (!selectedCandidate) return;\n\nif (!candidates.includes(selectedCandidate)) {\nshowError('Invalid option selected');\nreturn;\n}\n\nhandleVote(selectedCandidate);\n});\n}\n\nif (declareButton) {\ndeclareButton.addEventListener('click', handleDeclareWinner);\n}\n\nawait updateCandidatesAndScores();\n\nsetInterval(() => {\nif (timer > 0) {\ntimer--;\nupdateTimer();\n}\n}, 1000);\n};\n\ninitializeVoting().catch(error => {\nconsole.error('Failed to initialize voting:', error);\nshowError('Failed to initialize voting system');\n});\n})()"
}
}
