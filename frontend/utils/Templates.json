{
  "donation": {
    "html": "\n    <style>\n      .donate-container {\n        background-color: white;\n        width: 100%;\n        max-width: 28rem;\n        border: 2px solid black;\n        border-radius: 0.375rem;\n        height: 460px;\n        font-family: 'VT323', monospace;\n        overflow-y: auto;\n        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);\n        margin: 0 auto;\n      }\n      .content-wrapper {\n        padding: 16px;\n      }\n      .donate-image {\n        width: 100%;\n        height: auto;\n        max-height: 176px;\n        object-fit: contain;\n        margin-bottom: 8px;\n        border-radius: 0.125rem;\n      }\n      .form-container {\n        padding: 8px 4px;\n        display: flex;\n        flex-direction: column;\n        gap: 8px;\n      }\n      .input-label {\n        color: black;\n        font-size: 18px;\n      }\n      .amount-input-container {\n        display: flex;\n        align-items: center;\n        border: 1px solid #d1d5db;\n        padding: 8px;\n      }\n      .amount-input-icon {\n        width: 20px;\n        height: 20px;\n        margin-right: 8px;\n      }\n      .amount-input {\n        flex: 1;\n        background-color: transparent;\n        border: none;\n        outline: none;\n        color: black;\n        font-size: 16px;\n      }\n      .donate-button {\n        margin-top: 12px;\n        color: black;\n        font-size: 20px;\n        font-weight: 700;\n        padding: 4px 12px;\n        border-radius: 0.125rem;\n        width: 100%;\n        border: 1px solid black;\n        transition: all 0.3s;\n        cursor: pointer;\n      }\n      .donate-button:disabled {\n        opacity: 0.7;\n        cursor: not-allowed;\n      }\n      .donate-button.loading {\n        background: linear-gradient(to right, #60a5fa, #ffffff);\n        animation: pulse 2s infinite;\n      }\n      .predefined-amounts {\n        display: flex;\n        justify-content: space-between;\n        margin-top: 8px;\n      }\n      .predefined-amount-button {\n        color: black;\n        font-weight: bold;\n        padding: 4px 8px;\n        border-radius: 0.125rem;\n        border: 1px solid black;\n        flex: 1;\n        margin: 0 4px;\n      }\n      @keyframes pulse {\n        0% { background-position: 0% 50%; }\n        50% { background-position: 100% 50%; }\n        100% { background-position: 0% 50%; }\n      }\n    </style>\n    <div class=\"donate-container\">\n      <div class=\"content-wrapper\">\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3NcDS9MmqTwZLGavY36FuE8XmyPAoRIOJCQBK\" alt=\"Donate Background\" class=\"donate-image\" />\n        <div class=\"form-container\">\n          <label class=\"input-label\">Donate to cause:</label>\n          <div class=\"amount-input-container\">\n            <img src=\"https://utfs.io/f/PKy8oE1GN2J3ovmAor45P1iTwAUWSgurlXmB0cxH485C3q2s\" alt=\"APTOS\" class=\"amount-input-icon\" />\n            <input id=\"donationAmount\" type=\"number\" placeholder=\"Enter amount\" class=\"amount-input\" />\n          </div>\n          <button id=\"donateButton\" class=\"donate-button\">Donate APTOS</button>\n          <div class=\"predefined-amounts\">\n            <button class=\"predefined-amount-button\" data-amount=\"10\">Donate 10</button>\n            <button class=\"predefined-amount-button\" data-amount=\"50\">Donate 50</button>\n            <button class=\"predefined-amount-button\" data-amount=\"100\">Donate 100</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  ",
    "js": "\n    (function() {\n      const RECIPIENT = \"0xf9424969a5cfeb4639c4c75c2cd0ca62620ec624f4f28d76c4881a1e567d753f\";\n      \n      const waitForAptosWallet = () => {\n        return new Promise((resolve) => {\n          const checkWallet = () => {\n            if (window.aptos) {\n              resolve(window.aptos);\n            } else {\n              setTimeout(checkWallet, 100);\n            }\n          };\n          checkWallet();\n        });\n      };\n      \n      const checkTransactionStatus = async (hash) => {\n        try {\n          const response = await fetch(`https://fullnode.testnet.aptoslabs.com/v1/transactions/by_hash/${hash}`, {\n            headers: { 'Accept': 'application/json' }\n          });\n          const data = await response.json();\n          return data.success === true;\n        } catch (error) {\n          console.error('Error checking transaction status:', error);\n          return false;\n        }\n      };\n      \n      const waitForTransaction = async (hash, maxAttempts = 10) => {\n       return true;\n      };\n      \n      const initializeDonation = async () => {\n        const aptos = await waitForAptosWallet();\n        const donationAmountInput = document.getElementById('donationAmount');\n        const donateButton = document.getElementById('donateButton');\n        const predefinedButtons = document.querySelectorAll('.predefined-amount-button');\n        \n        let loading = false;\n        \n        const sendDonation = async (amount) => {\n          try {\n            const response = await aptos.connect();\n            const account = response.address;\n            \n            const payload = {\n              type: \"entry_function_payload\",\n              function: \"0x1::coin::transfer\",\n              type_arguments: [\"0x1::aptos_coin::AptosCoin\"],\n              arguments: [\n                RECIPIENT,\n                (amount * 100000000).toString()\n              ]\n            };\n            \n            const pendingTransaction = await aptos.signAndSubmitTransaction({ payload });\n            const success = await waitForTransaction(pendingTransaction.hash);\n            return success;\n          } catch (error) {\n            console.error('Transaction failed:', error);\n            return false;\n          }\n        };\n        \n        const handleDonation = async (amount) => {\n          if (loading) return;\n          \n          if (isNaN(amount) || amount <= 0) {\n            alert('Please enter a valid amount');\n            return;\n          }\n          \n          loading = true;\n          donateButton.disabled = true;\n          donateButton.classList.add('loading');\n          donateButton.textContent = 'Donating...';\n          \n          try {\n            const success = await sendDonation(amount);\n            \n            if (success) {\n              donateButton.classList.remove('loading');\n              donateButton.textContent = 'Donation Successful';\n              \n              setTimeout(() => {\n                donateButton.classList.remove('loading');\n                donateButton.disabled = false;\n                donateButton.textContent = 'Donate APTOS';\n                donationAmountInput.value = '';\n              }, 3000);\n            } else {\n              throw new Error('Transaction failed');\n            }\n          } catch (error) {\n            console.error('Donation error:', error);\n            donateButton.classList.remove('loading');\n            donateButton.disabled = false;\n            donateButton.textContent = 'Donate APTOS';\n            alert('Transaction failed. Please try again.');\n          } finally {\n            loading = false;\n          }\n        };\n        \n        donateButton.addEventListener('click', () => {\n          const amount = Number(donationAmountInput.value);\n          handleDonation(amount);\n        });\n        \n        predefinedButtons.forEach(button => {\n          button.addEventListener('click', () => {\n            const amount = Number(button.getAttribute('data-amount'));\n            donationAmountInput.value = amount;\n            handleDonation(amount);\n          });\n        });\n      };\n      \n      initializeDonation();\n    })();\n  ",
    "name": "Donate"
  },

  "payment": {
    "html": "<style>\n.payment-container {\nbackground-color: white;\nwidth: 320px;\nborder: 2px solid black;\nborder-radius: 0.375rem;\nheight: 460px;\nfont-family: 'VT323', monospace;\noverflow-y: auto;\nbox-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);\nmargin: 0 auto;\n}\n.content-wrapper {\npadding: 16px;\n}\n.payment-image {\nwidth: 100%;\nheight: auto;\nmax-height: 176px;\nobject-fit: contain;\nmargin-bottom: 16px;\nborder-radius: 0.125rem;\n}\n.form-container {\npadding: 12px 4px;\ndisplay: flex;\nflex-direction: column;\nmargin-top: 12px;\n}\n.input-label {\ncolor: black;\nfont-weight: 600;\nfont-size: 18px;\nmargin-top: 4px;\n}\n.service-select {\nflex: 1;\nbackground-color: transparent;\npadding: 8px;\nborder: 1px solid #d1d5db;\noutline: none;\nmargin-top: 8px;\ncolor: black;\n}\n.amount-input {\nflex: 1;\nbackground-color: transparent;\ncolor: black;\nborder-radius: 0;\nmargin-top: 4px;\nborder: 1px solid #d1d5db;\npadding: 8px;\n}\n.payment-button {\nmargin-top: 12px;\ncolor: black;\nfont-size: 20px;\nfont-weight: 700;\npadding: 4px 12px;\nborder-radius: 0.125rem;\nwidth: 100%;\nborder: 1px solid black;\ntransition: all 0.3s;\ncursor: pointer;\n}\n.payment-button:disabled {\nopacity: 0.7;\ncursor: not-allowed;\n}\n.payment-button.loading {\nbackground: linear-gradient(to right, #60a5fa, #ffffff);\nanimation: pulse 2s infinite;\n}\n@keyframes pulse {\n0% {\nbackground-position: 0% 50%;\n}\n50% {\nbackground-position: 100% 50%;\n}\n100% {\nbackground-position: 0% 50%;\n}\n}\n</style>\n<div class=\"payment-container\">\n<div class=\"content-wrapper\">\n<img src=\"https://utfs.io/f/PKy8oE1GN2J3QgJ0elMB4oh9KpZbJwuajRl6c2XWTSfEVm85\" alt=\"Payment aptos\" class=\"payment-image\" />\n<div class=\"form-container\">\n<label class=\"input-label\">Service Rendered:</label>\n<select id=\"serviceType\" class=\"service-select\">\n<option value=\"Gig Payment\">Gig Payment</option>\n<option value=\"Tip\">Tip</option>\n</select>\n<label class=\"input-label\">Payment Fee:</label>\n<input id=\"paymentAmount\" type=\"number\" placeholder=\"Enter Amount\" class=\"amount-input\" />\n<button id=\"paymentButton\" class=\"payment-button\">Send Payment</button>\n</div>\n</div>\n</div>",
    "js": "(function() {\nconst RECIPIENT = \"0xf9424969a5cfeb4639c4c75c2cd0ca62620ec624f4f28d76c4881a1e567d753f\";\n\nconst waitForAptosWallet = () => {\nreturn new Promise((resolve) => {\nconst checkWallet = () => {\nif (window.aptos) {\nresolve(window.aptos)\n} else {\nsetTimeout(checkWallet, 100)\n}\n}\ncheckWallet()\n})\n}\n\nconst checkTransactionStatus = async (hash) => {\ntry {\nconst response = await fetch(`https://fullnode.testnet.aptoslabs.com/v1/transactions/by_hash/${hash}`, {\n    headers: {\n        'Accept': 'application/json'\n    }\n})\nconst data = await response.json()\nreturn data.success === true\n} catch (error) {\nconsole.error('Error checking transaction status:', error)\nreturn false\n}\n}\n\nconst waitForTransaction = async (hash, maxAttempts = 10) => {\n return true\n}\nconst initializePayment = async () => {\nconst aptos = await waitForAptosWallet()\nconst serviceTypeSelect = document.getElementById('serviceType')\nconst paymentAmountInput = document.getElementById('paymentAmount')\nconst paymentButton = document.getElementById('paymentButton')\n\nlet loading = false\n\nconst sendPayment = async (serviceType, amount) => {\ntry {\nconst response = await aptos.connect()\nconst account = response.address\n\nconst payload = {\ntype: \"entry_function_payload\",\nfunction: \"0x1::coin::transfer\",\ntype_arguments: [\"0x1::aptos_coin::AptosCoin\"],\narguments: [\nRECIPIENT,\n(amount * 100000000).toString()\n]\n}\n\nconst pendingTransaction = await aptos.signAndSubmitTransaction({ payload })\n\nconst success = await waitForTransaction(pendingTransaction.hash)\nreturn success\n\n} catch (error) {\nconsole.error('Transaction failed:', error)\nreturn false\n}\n}\n\npaymentButton.addEventListener('click', async () => {\nif (loading) return\n\nconst amount = Number(paymentAmountInput.value)\nconst serviceType = serviceTypeSelect.value\n\nif (isNaN(amount) || amount <= 0) {\nalert('Please enter a valid amount')\nreturn\n}\n\nloading = true\npaymentButton.disabled = true\npaymentButton.classList.add('loading')\npaymentButton.textContent = 'Paying...'\n\ntry {\nconst success = await sendPayment(serviceType, amount)\n\nif (success) {\npaymentButton.classList.remove('loading')\npaymentButton.textContent = 'Payment Successful'\n\nsetTimeout(() => {\npaymentButton.classList.remove('loading')\npaymentButton.disabled = false\npaymentButton.textContent = 'Send Payment'\npaymentAmountInput.value = ''\n}, 3000)\n} else {\nthrow new Error('Transaction failed')\n}\n} catch (error) {\nconsole.error('Payment error:', error)\npaymentButton.classList.remove('loading')\npaymentButton.disabled = false\npaymentButton.textContent = 'Send Payment'\nalert('Transaction failed. Please try again.')\n} finally {\nloading = false\n}\n})\n}\n\ninitializePayment()\n})()",
    "name": "Payment"
  },

 "marketplace": {
    "name": "Marketplace",
    "html": "\n    <style>\n      .container { background-color: white; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); margin: auto; border: 2px solid black; height: 460px; width: 330px; overflow-y: auto; font-family: 'VT323', monospace; padding: 16px; }\n      .image-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 8px; }\n      .image { width: 100%; height: 144px; object-fit: cover; border-radius: 4px; }\n      .label { color: black; font-size: 18px; margin-bottom: 4px; }\n      .input { width: 100%; background-color: transparent; color: black; border: 1px solid #d1d5db; padding: 8px; border-radius: 4px; }\n      .button { margin-top: 12px; color: black; font-size: 20px; font-weight: bold; padding: 8px; border-radius: 4px; width: 100%; border: 1px solid black; transition: background-color 0.3s; }\n      .loading { background: linear-gradient(to right, #3b82f6, white); animation: pulse 1s infinite; }\n      @keyframes pulse { 0% { opacity: 1; } 50% { opacity: 0.7; } 100% { opacity: 1; } }\n    </style>\n    <div class=\"container\">\n      <div class=\"image-grid\">\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3ImEUxfLevETDAcJq1nugYV4XWR2yULbo7PO9\" alt=\"NFT aptos\" class=\"image\" />\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3KOWGsVvRh3M9zZEHBsUJXb2rmgqjVN7dGF0A\" alt=\"NFT aptos\" class=\"image\" />\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J34Ea4iszOtmS4gyWw60ueoFxcn1br78fIZYvJ\" alt=\"NFT aptos\" class=\"image\" />\n        <img src=\"https://utfs.io/f/PKy8oE1GN2J3SBvM9TJRHgldbCZqO68FamQULKyreIx24zPN\" alt=\"NFT aptos\" class=\"image\" />\n      </div>\n\n      <label class=\"label\">Quantity:</label>\n      <input\n        id=\"amount\"\n        type=\"number\"\n        placeholder=\"Amount\"\n        class=\"input\"\n      />\n\n      <button\n        id=\"purchaseButton\"\n        onclick=\"handleNFT()\"\n        disabled=\"false\"\n        class=\"button\"\n      >\n        Purchase NFT\n      </button>\n    </div>\n  ",
    "js": " \nconst RECIPIENT = \"0xf9424969a5cfeb4639c4c75c2cd0ca62620ec624f4f28d76c4881a1e567d753f\"; \n    let loading = false;\n    let success = false;\n\n    async function handleNFT() {\n      loading = true;\n      success = false;\n\n      // Simulating the bridging process\n      await new Promise((resolve) => setTimeout(resolve, 5000));\n\n      loading = false;\n      success = true;\n\n      const purchaseButton = document.getElementById('purchaseButton');\n      purchaseButton.innerHTML = '✓ Coming Soon';\n      purchaseButton.style.backgroundColor = 'blue';\n      purchaseButton.style.color = 'white';\n\n      setTimeout(() => {\n        success = false;\n        document.getElementById('amount').value = '';\n        purchaseButton.innerHTML = 'Purchase NFT';\n        purchaseButton.style.backgroundColor = '';\n        purchaseButton.style.color = 'black';\n      }, 3000);\n    }\n  "
  }
}
